name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.goreleaser.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: dist/*

  release-validation:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: [release]
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: goreleaser-artifacts
          path: artifacts/

      - name: Validate artifacts
        run: |
          echo "üì¶ Validating release artifacts..."
          ls -la artifacts/

          # Check that all expected binaries exist
          expected_files=(
            "plannergen_Linux_x86_64.tar.gz"
            "plannergen_Linux_arm64.tar.gz"
            "plannergen_Darwin_x86_64.tar.gz"
            "plannergen_Darwin_arm64.tar.gz"
            "plannergen_Windows_x86_64.zip"
            "plannergen_Windows_arm64.zip"
            "checksums.txt"
          )

          for file in "${expected_files[@]}"; do
            if [ ! -f "artifacts/$file" ]; then
              echo "‚ùå Missing artifact: $file"
              exit 1
            else
              echo "‚úÖ Found: $file"
            fi
          done

          echo "‚úÖ All artifacts present"

      - name: Test binary functionality
        run: |
          echo "üß™ Testing binary functionality..."

          # Extract and test Linux binary
          tar -xzf artifacts/plannergen_Linux_x86_64.tar.gz
          chmod +x plannergen

          # Test basic functionality
          ./plannergen --help | grep -q "PhD Dissertation Planner" || (echo "‚ùå Binary help test failed" && exit 1)
          echo "‚úÖ Binary functionality test passed"

      - name: Validate checksums
        run: |
          echo "üîê Validating checksums..."
          cd artifacts

          # Verify checksums.txt exists and has entries
          [ -s "checksums.txt" ] || (echo "‚ùå Checksums file is empty" && exit 1)

          # Count expected entries (6 binaries)
          checksum_count=$(wc -l < checksums.txt)
          if [ "$checksum_count" -lt 6 ]; then
            echo "‚ùå Expected at least 6 checksum entries, got $checksum_count"
            exit 1
          fi

          echo "‚úÖ Checksum validation passed"

  publish-validation-results:
    name: Publish Validation Results
    runs-on: ubuntu-latest
    needs: [release-validation]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create validation summary
        run: |
          echo "## üöÄ Release Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.release-validation.result }}" == "success" ]; then
            echo "‚úÖ **Release Validation:** PASSED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Validation Checks:" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ All artifacts present (Linux, macOS, Windows)" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Binary functionality verified" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Checksum integrity confirmed" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Docker images published" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Release Validation:** FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the release validation job logs for details." >> $GITHUB_STEP_SUMMARY
          fi
