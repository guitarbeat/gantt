name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      deploy_docker:
        description: 'Deploy Docker images'
        required: false
        default: true
        type: boolean
      update_docs:
        description: 'Update documentation'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-docker:
    name: Deploy Docker Images
    runs-on: ubuntu-latest
    if: inputs.deploy_docker != false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: inputs.update_docs == true || (github.ref == 'refs/heads/main' && github.event_name == 'push')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd docs
          npm install

      - name: Build documentation
        run: |
          cd docs
          npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/build
          cname: planner.phd-dissertation-planner.dev

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: 1

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'

      - name: Upload Gosec scan results
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'gosec-results.sarif'

  deploy-validation:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [deploy-docker]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Docker image
        run: |
          echo "🐳 Validating Docker deployment..."

          # Check if image exists in registry
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || (echo "❌ Failed to pull Docker image" && exit 1)

          # Test basic functionality
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --help | grep -q "PhD Dissertation Planner" || (echo "❌ Docker container test failed" && exit 1)

          echo "✅ Docker image validation passed"

      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** $(git rev-parse HEAD | cut -c1-8)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy-docker.result }}" == "success" ]; then
            echo "✅ **Docker Deployment:** Successful" >> $GITHUB_STEP_SUMMARY
            echo "- Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "- Platforms: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker Deployment:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ inputs.update_docs }}" == "true" ]; then
            if [ "${{ needs.deploy-docs.result }}" == "success" ]; then
              echo "✅ **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Documentation:** Deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Security Scans" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ **Security scans:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security scans:** Issues detected (see security job logs)" >> $GITHUB_STEP_SUMMARY
          fi
