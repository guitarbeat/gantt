name: Pre-Release Validation

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to validate (e.g., v1.2.3)'
        required: true
        type: string
      test_pdf_generation:
        description: 'Test PDF generation with LaTeX'
        required: false
        default: true
        type: boolean
      test_docker_build:
        description: 'Test Docker image build'
        required: false
        default: true
        type: boolean
      create_release_branch:
        description: 'Create release branch for validation'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

env:
  VERSION: ${{ inputs.version }}
  GO_VERSION: '1.22'

jobs:
  validate-version:
    name: Validate Version Format
    runs-on: ubuntu-latest

    steps:
      - name: Validate semantic version
        run: |
          if [[ ! "${{ env.VERSION }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "‚ùå Invalid version format: ${{ env.VERSION }}"
            echo "Expected format: v1.2.3 or v1.2.3-rc.1"
            exit 1
          fi
          echo "‚úÖ Version format is valid: ${{ env.VERSION }}"

  test-release-build:
    name: Test Release Build
    runs-on: ubuntu-latest
    needs: [validate-version]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Test Goreleaser dry run
        run: |
          echo "üß™ Testing Goreleaser dry run for version ${{ env.VERSION }}..."

          # Create a temporary git tag for testing
          git tag -f ${{ env.VERSION }}

          # Run Goreleaser in snapshot mode to test the build process
          go run github.com/goreleaser/goreleaser@latest release --clean --snapshot --skip-publish

      - name: Verify build artifacts
        run: |
          echo "üì¶ Checking generated artifacts..."
          ls -la dist/

          # Check for expected files
          expected_count=$(find dist/ -name "*.tar.gz" -o -name "*.zip" | wc -l)
          if [ "$expected_count" -lt 3 ]; then
            echo "‚ùå Expected at least 3 archive files, found $expected_count"
            exit 1
          fi

          # Check checksums file
          if [ ! -f "dist/checksums.txt" ]; then
            echo "‚ùå Checksums file not found"
            exit 1
          fi

          echo "‚úÖ Build artifacts verified"

      - name: Test binary functionality
        run: |
          echo "üß™ Testing binary functionality..."

          # Extract Linux binary for testing
          linux_archive=$(find dist/ -name "*Linux*x86_64.tar.gz" | head -1)
          if [ -n "$linux_archive" ]; then
            tar -xzf "$linux_archive"
            chmod +x plannergen

            # Test basic functionality
            ./plannergen --version | grep -q "${{ env.VERSION }}" || (echo "‚ùå Version check failed" && exit 1)
            ./plannergen --help | grep -q "PhD Dissertation Planner" || (echo "‚ùå Help check failed" && exit 1)

            echo "‚úÖ Binary functionality verified"
          else
            echo "‚ö†Ô∏è Linux binary not found for testing"
          fi

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prerelease-test-artifacts
          path: dist/
          retention-days: 7

  test-latex-pdf:
    name: Test LaTeX & PDF Generation
    runs-on: ubuntu-latest
    needs: [validate-version]
    if: inputs.test_pdf_generation == true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install LaTeX
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-xetex texlive-latex-extra texlive-fonts-recommended

      - name: Build and test LaTeX generation
        run: |
          echo "üìÑ Testing LaTeX and PDF generation..."

          # Build the application
          go build -ldflags="-X main.version=${{ env.VERSION }}" -o plannergen ./cmd/planner

          # Generate LaTeX
          mkdir -p validation_output
          PLANNER_SILENT=1 ./plannergen --config "src/core/base.yaml,src/core/monthly_calendar.yaml" --outdir validation_output --csv input_data/research_timeline_v5.1_comprehensive.csv

          # Verify LaTeX file
          [ -f "validation_output/monthly_calendar.tex" ] || (echo "‚ùå LaTeX file not generated" && exit 1)
          echo "‚úÖ LaTeX file generated successfully"

          # Test PDF compilation
          cd validation_output
          if timeout 600 xelatex -interaction=batchmode -halt-on-error monthly_calendar.tex > xelatex.log 2>&1; then
            [ -f "monthly_calendar.pdf" ] || (echo "‚ùå PDF file not created" && exit 1)
            pdf_size=$(stat -c%s monthly_calendar.pdf)
            echo "‚úÖ PDF compiled successfully (${pdf_size} bytes)"
          else
            echo "‚ùå PDF compilation failed"
            cat xelatex.log
            exit 1
          fi

      - name: Upload LaTeX validation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: latex-validation-results
          path: |
            validation_output/
          retention-days: 7

  test-docker-build:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: [validate-version]
    if: inputs.test_docker_build == true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image for validation
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          platforms: linux/amd64
          push: false
          tags: prerelease-validation:${{ env.VERSION }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          echo "üê≥ Testing Docker image functionality..."

          # Test basic functionality
          docker run --rm prerelease-validation:${{ env.VERSION }} --version | grep -q "${{ env.VERSION }}" || (echo "‚ùå Docker version check failed" && exit 1)
          docker run --rm prerelease-validation:${{ env.VERSION }} --help | grep -q "PhD Dissertation Planner" || (echo "‚ùå Docker help check failed" && exit 1)

          # Test LaTeX generation in container
          docker run --rm -v $(pwd):/workspace prerelease-validation:${{ env.VERSION }} --config "/workspace/src/core/base.yaml,/workspace/src/core/monthly_calendar.yaml" --outdir /tmp/output --csv /workspace/input_data/research_timeline_v5.1_comprehensive.csv

          # Check if LaTeX was generated
          docker run --rm -v $(pwd):/workspace prerelease-validation:${{ env.VERSION }} sh -c "test -f /tmp/output/monthly_calendar.tex" || (echo "‚ùå Docker LaTeX generation failed" && exit 1)

          echo "‚úÖ Docker image validation passed"

  create-release-branch:
    name: Create Release Branch
    runs-on: ubuntu-latest
    needs: [test-release-build, test-latex-pdf, test-docker-build]
    if: inputs.create_release_branch == true && (needs.test-release-build.result == 'success' && (needs.test-latex-pdf.result == 'success' || needs.test-latex-pdf.result == 'skipped') && (needs.test-docker-build.result == 'success' || needs.test-docker-build.result == 'skipped'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create release branch
        run: |
          branch_name="release/${{ env.VERSION }}"
          echo "üåø Creating release branch: $branch_name"

          git checkout -b "$branch_name"
          git push origin "$branch_name"

          echo "‚úÖ Release branch created: $branch_name"

      - name: Create release PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release/${{ env.VERSION }}
          base: main
          title: "üöÄ Release ${{ env.VERSION }}"
          body: |
            ## üöÄ Release ${{ env.VERSION }}

            This PR prepares the ${{ env.VERSION }} release.

            ### ‚úÖ Pre-Release Validation Passed
            - ‚úÖ Version format validation
            - ‚úÖ Cross-platform builds (Linux, macOS, Windows)
            - ‚úÖ Binary functionality tests
            - ${{ inputs.test_pdf_generation == true && '‚úÖ LaTeX/PDF generation tests' || '‚ö†Ô∏è LaTeX/PDF tests skipped' }}
            - ${{ inputs.test_docker_build == true && '‚úÖ Docker image validation' || '‚ö†Ô∏è Docker tests skipped' }}

            ### üìã Release Checklist
            - [ ] Update CHANGELOG.md
            - [ ] Review breaking changes
            - [ ] Update documentation
            - [ ] Tag release: `git tag ${{ env.VERSION }}`

            ### üîó Related Artifacts
            Pre-release validation artifacts are available in the Actions artifacts for this workflow run.

            ---
            *This release branch was created automatically by the pre-release validation workflow.*
          draft: true

  validation-summary:
    name: Pre-Release Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-version, test-release-build, test-latex-pdf, test-docker-build]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create validation summary
        run: |
          echo "## üß™ Pre-Release Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** $(git rev-parse HEAD | cut -c1-8)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Validation Results
          echo "### ‚úÖ Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.validate-version.result }}" == "success" ]; then
            echo "- ‚úÖ **Version Format:** Valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå **Version Format:** Invalid" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-release-build.result }}" == "success" ]; then
            echo "- ‚úÖ **Cross-Platform Builds:** All platforms built successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå **Cross-Platform Builds:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-latex-pdf.result }}" == "success" ]; then
            echo "- ‚úÖ **LaTeX/PDF Generation:** Tests passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-latex-pdf.result }}" == "skipped" ]; then
            echo "- ‚ö†Ô∏è **LaTeX/PDF Generation:** Tests skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå **LaTeX/PDF Generation:** Tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-docker-build.result }}" == "success" ]; then
            echo "- ‚úÖ **Docker Build:** Image built and tested successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-docker-build.result }}" == "skipped" ]; then
            echo "- ‚ö†Ô∏è **Docker Build:** Tests skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå **Docker Build:** Tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall Status
          success_count=0
          [ "${{ needs.validate-version.result }}" == "success" ] && ((success_count++))
          [ "${{ needs.test-release-build.result }}" == "success" ] && ((success_count++))
          [ "${{ needs.test-latex-pdf.result }}" == "success" ] && ((success_count++))
          [ "${{ needs.test-docker-build.result }}" == "success" ] && ((success_count++))

          if [ $success_count -eq 4 ]; then
            echo "### üéâ Overall Status: READY FOR RELEASE" >> $GITHUB_STEP_SUMMARY
            echo "All pre-release validations have passed. The release is ready to proceed." >> $GITHUB_STEP_SUMMARY
          elif [ $success_count -ge 2 ]; then
            echo "### ‚ö†Ô∏è Overall Status: REQUIRES ATTENTION" >> $GITHUB_STEP_SUMMARY
            echo "Some validations failed or were skipped. Please review the results before proceeding." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Overall Status: BLOCKED" >> $GITHUB_STEP_SUMMARY
            echo "Critical validations failed. Do not proceed with release until issues are resolved." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*This summary was automatically generated by the pre-release validation workflow.*" >> $GITHUB_STEP_SUMMARY
