name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22']

    steps:
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test ./...

    - name: Run tests with coverage
      run: go test -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.22'
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.22']

    steps:
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Build
      run: go build -v ./cmd/planner

    - name: Build with race detector
      run: go build -race -v ./cmd/planner

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ubuntu-latest-go-1.22-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ubuntu-latest-go-1.22-

    - name: Download dependencies
      run: go mod download

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

    - name: Check for security issues
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Install LaTeX
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-latex-base texlive-latex-extra texlive-fonts-recommended

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ubuntu-latest-go-1.22-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ubuntu-latest-go-1.22-

    - name: Download dependencies
      run: go mod download

    - name: Build application
      run: go build -o plannergen ./cmd/planner

    - name: Run integration tests
      run: go test ./tests/integration/...

    - name: Test basic PDF generation
      run: |
        mkdir -p test_output
        ./plannergen --config configs/base.yaml --outdir test_output
        if [ ! -f "test_output/base.tex" ]; then
          echo "PDF generation failed - LaTeX file not created"
          exit 1
        fi

  release:
    name: Release
    needs: [test, build, quality, integration]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ubuntu-latest-go-1.22-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ubuntu-latest-go-1.22-

    - name: Download dependencies
      run: go mod download

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      with:
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}