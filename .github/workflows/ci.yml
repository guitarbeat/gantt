name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.22'

jobs:
  test:
    name: Test (${{ matrix.os }}, Go ${{ matrix.go-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21', '1.22']
        include:
          - os: ubuntu-latest
            go-version: '1.22'
            upload-coverage: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic -timeout=10m ./...

      - name: Upload coverage to Codecov
        if: matrix.upload-coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.txt
          flags: unittests
          name: codecov-${{ matrix.os }}-go${{ matrix.go-version }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-go${{ matrix.go-version }}
          path: |
            coverage.txt
            *.log
          retention-days: 30

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=10m --verbose

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Check imports
        run: |
          if ! goimports -d src/ | grep -q '^'; then
            echo "Imports are properly formatted"
          else
            echo "The following import changes are needed:"
            goimports -d src/
            exit 1
          fi

  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_suffix: linux-amd64
          - os: windows-latest
            asset_suffix: windows-amd64.exe
          - os: macos-latest
            asset_suffix: darwin-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        run: go build -v -ldflags="-s -w -X main.version=${{ github.sha }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" -o plannergen${{ matrix.os == 'windows-latest' && '.exe' || '' }} ./cmd/planner

      - name: Test binary
        run: ./plannergen${{ matrix.os == 'windows-latest' && '.exe' || '' }} --help

      - name: Build test (with LaTeX generation)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p generated
          PLANNER_SILENT=1 ./plannergen --config "src/core/base.yaml,src/core/monthly_calendar.yaml" --outdir generated --csv input_data/research_timeline_v5.1_comprehensive.csv

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: plannergen-${{ matrix.asset_suffix }}
          path: plannergen${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          retention-days: 30

      - name: Upload LaTeX artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: latex-artifacts
          path: |
            generated/*.tex
            generated/*.log
          retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: plannergen-linux-amd64
          path: .

      - name: Make binary executable
        run: chmod +x plannergen

      - name: Install LaTeX (for PDF generation)
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-xetex texlive-latex-extra texlive-fonts-recommended

      - name: Run integration test
        run: |
          mkdir -p test_output
          ./plannergen --config "src/core/base.yaml,src/core/monthly_calendar.yaml" --outdir test_output --csv input_data/research_timeline_v5.1_comprehensive.csv
          ls -la test_output/

      - name: Verify output files
        run: |
          [ -f "test_output/monthly_calendar.tex" ] || (echo "LaTeX file not generated" && exit 1)
          echo "✓ LaTeX file generated successfully"

      - name: Test PDF compilation
        run: |
          cd test_output
          if xelatex -interaction=batchmode monthly_calendar.tex; then
            echo "✓ PDF compilation successful"
            [ -f "monthly_calendar.pdf" ] || (echo "PDF file not created" && exit 1)
          else
            echo "⚠ PDF compilation failed, but LaTeX generation worked"
          fi

      - name: Upload integration test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test_output/
          retention-days: 30
