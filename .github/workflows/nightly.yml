name: Nightly Build

on:
  schedule:
    # Run nightly at 2 AM UTC (Monday through Friday)
    - cron: '0 2 * * 1-5'
  workflow_dispatch:
    inputs:
      run_extended_tests:
        description: 'Run extended integration tests'
        required: false
        default: false
        type: boolean
      create_snapshot_release:
        description: 'Create snapshot release'
        required: false
        default: false
        type: boolean

concurrency:
  group: nightly-${{ github.ref }}
  cancel-in-progress: false

env:
  GO_VERSION: '1.22'

jobs:
  nightly-test:
    name: Nightly Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22']
        include:
          - os: ubuntu-latest
            go-version: '1.22'
            extended: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: nightly-${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            nightly-${{ runner.os }}-go-${{ matrix.go-version }}-
            nightly-${{ runner.os }}-go-

      - name: Run comprehensive tests
        run: |
          echo "🧪 Running comprehensive test suite..."
          go test -v -race -coverprofile=coverage.txt -covermode=atomic -timeout=15m ./...
          go tool cover -html=coverage.txt -o coverage.html

      - name: Run benchmarks
        run: go test -bench=. -benchmem -run=^$ ./...

      - name: Check for data races (extended)
        if: matrix.extended
        run: go test -race -run=. -timeout=10m ./...

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-test-results-${{ matrix.os }}-go${{ matrix.go-version }}
          path: |
            coverage.txt
            coverage.html
            *.log
          retention-days: 7

  nightly-build:
    name: Nightly Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            latex_test: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        run: |
          go build -v -ldflags="-s -w -X main.commit=$(git rev-parse HEAD) -X main.date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" -o plannergen${{ matrix.os == 'windows-latest' && '.exe' || '' }} ./cmd/planner

      - name: Test binary
        run: ./plannergen${{ matrix.os == 'windows-latest' && '.exe' || '' }} --version

      - name: Extended LaTeX test
        if: matrix.latex_test
        run: |
          echo "📄 Testing LaTeX generation..."

          # Install LaTeX
          sudo apt-get update
          sudo apt-get install -y texlive-xetex texlive-latex-extra texlive-fonts-recommended

          mkdir -p nightly_output
          PLANNER_SILENT=1 ./plannergen --config "src/core/base.yaml,src/core/monthly_calendar.yaml" --outdir nightly_output --csv input_data/research_timeline_v5.1_comprehensive.csv

          # Verify LaTeX file was created
          [ -f "nightly_output/monthly_calendar.tex" ] || (echo "❌ LaTeX file not generated" && exit 1)

          # Test PDF compilation
          cd nightly_output
          if timeout 300 xelatex -interaction=batchmode monthly_calendar.tex; then
            echo "✅ PDF compilation successful"
            [ -f "monthly_calendar.pdf" ] || echo "⚠ PDF file not created, but LaTeX compilation succeeded"
          else
            echo "⚠ PDF compilation timed out or failed, but LaTeX generation worked"
          fi

      - name: Upload nightly build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nightly-build-${{ matrix.os }}
          path: |
            plannergen${{ matrix.os == 'windows-latest' && '.exe' || '' }}
            nightly_output/
          retention-days: 7

  nightly-snapshot:
    name: Create Snapshot Release
    runs-on: ubuntu-latest
    needs: [nightly-test, nightly-build]
    if: github.event_name == 'workflow_dispatch' && inputs.create_snapshot_release == true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create snapshot release
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  nightly-report:
    name: Generate Nightly Report
    runs-on: ubuntu-latest
    needs: [nightly-test, nightly-build]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: nightly-test-results-ubuntu-latest-go1.22
          path: test-results/

      - name: Generate nightly report
        run: |
          echo "## 🌙 Nightly Build Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** $(git rev-parse HEAD | cut -c1-8)" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test Results Summary
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          if [ -f "test-results/coverage.txt" ]; then
            coverage=$(grep -o 'coverage: [0-9.]*%' test-results/coverage.txt | tail -1)
            if [ -n "$coverage" ]; then
              echo "✅ **Coverage:** $coverage" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **Tests:** Passed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Tests:** Failed to generate coverage report" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Build Status
          echo "### 🔨 Build Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.nightly-build.result }}" == "success" ]; then
            echo "✅ **Build:** All platforms successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build:** Failed on one or more platforms" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall Status
          if [ "${{ needs.nightly-test.result }}" == "success" ] && [ "${{ needs.nightly-build.result }}" == "success" ]; then
            echo "### ✅ Overall Status: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "Nightly build completed successfully with all tests passing." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "Nightly build encountered issues. Please check the detailed logs." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*This report was automatically generated by the nightly build workflow.*" >> $GITHUB_STEP_SUMMARY
